
const database = require("../database/database");

require("dotenv").config();

const bcrypt = require('bcrypt');
const jwt = require('jsonwebtoken');


const saltRounds = 10;



const userLogin = async (req,res)=>{
    const data = await req.body;
   
    
    let existingUser ;
    try {
        existingUser = await database.findOneUser(data.username);
        
        
    } catch (error) {
    
        return new Error(error);
    }
    if(!existingUser){
        return res.status(400).json({message:"User not found."});
    }

    bcrypt.compare(data.password,existingUser.password,function(err,result){
        if(result === true){
            //generating token
            const token = jwt.sign({id:existingUser._id},process.env.TOKEN_PRIVATE_KEY,{
                expiresIn:"35s",
            })
            //if already cookies in there so  remove first 
            if(req.cookies[`${existingUser._id}`]){
                req.cookies[`${existingUser._id}`] = "";
            }
          //after userLogin  storing token in httpOnly cookies 
            res.cookie(String(existingUser._id),token,{
                path:"/",
                expires: new Date(Date.now()+1000*30),//30 sec expire
                httpOnly:true,
                sameSite:'lax'
            })

            return res.status(200).json({message:'Successfully Logged In',token});
        }else{
            
            return res.status(400).json({message:'Invalid Email or Password'})
        }
    })
    
    
}








const userRegistration =  async(req,res)=>{
    const data = await req.body;
    if(data.password == data.confirmPassword){

        bcrypt.hash(data.password,saltRounds,function(err,hash){//hashing the password and store in database
            database.createUser(data.votingID,data.firstName,data.middleName,data.lastName,data.email,hash);
        })
        
        console.log(data);
        return res.status(200).json({message:'Successfully User Registration'});
    }else{
        return res.status(400).json({message:'Password Doesnot Match'})
    }
}



//Verify Token

const verifyToken = (req,res,next)=>{
    //Using Cookie Came From FrontEnd which is actually generated by me 
    const cookies = req.headers.cookie;
    let token;
    if(typeof cookies ==='string'){
         token  = cookies.split("=")[1];//slipt headers from token
    }
   
    if(!token){
        res.status(400).json({message:"No Token found"})
    }

    jwt.verify(String(token),process.env.TOKEN_PRIVATE_KEY,(err,decode)=>{
        if(err){
            return res.status(400).json({message:"Invalid Token"})
        }

        req.id = decode.id;//attach decoded id to req.id for next getUser function
        next(); 

    })

       


    

}

//Refresh The Token

const refreshToken =async(req,res,next)=>{
    const cookies = req.headers.cookie;
    let prevToken;
    if(typeof cookies ==='string'){
         prevToken  = cookies.split("=")[1];//slipt headers from token
    }

    if(!prevToken){
        res.status(400).json({message:"No Token found"})
    }
    jwt.verify(String(prevToken),process.env.TOKEN_PRIVATE_KEY,(err,decode)=>{
        if(err){
            return res.status(403).json({message:"Authentication failed"})
        }

        //after token verify
        res.clearCookie(`${decode.id}`);
        req.cookies[`${decode.id}`]="";//rest cookie from headers {headers is object}

        //after reset cookie - Generating New Token

        const newToken = jwt.sign({id:decode.id},process.env.TOKEN_PRIVATE_KEY,{
            expiresIn:"35s",
        })

        //define new cookies

        res.cookie(String(decode.id),newToken,{
            path:"/",
            expires: new Date(Date.now()+1000*30),//30 sec expire
            httpOnly:true,
            sameSite:'lax'
        })

        req.id = decode.id;// set request header to user id which we get from decode .id 
        next(); 


    })

    
}


const getUser = async(req,res)=>{
    const userID = req.id;
    let user;
    try {
        user = await database.findOneUserById(userID);
        console.log(user);
    } catch (error) {
        return new Error(error);
    }

    if(!user){
        return res.status(404).json({message:"User Not Found"})
    }

    return res.status(200).json({user});
}


const logout = (req,res)=>{
    const cookies = req.headers.cookie;
    let prevToken;
    if(typeof cookies ==='string'){
         prevToken  = cookies.split("=")[1];//slipt headers from token
    }

    if(!prevToken){
        res.status(400).json({message:"No Token found"})
    }




    jwt.verify(String(prevToken),process.env.TOKEN_PRIVATE_KEY,(err,decode)=>{
        if(err){
            return res.status(403).json({message:"Authentication failed"})
        }

        //after token verify
        res.clearCookie(`${decode.id}`);
        req.cookies[`${decode.id}`]="";//rest cookie from headers {headers is object}

       

       return res.status(200).json({message:"Successfully Logged Out"})


    })
   
        
}



module.exports={
    userLogin:userLogin,
    userRegistration:userRegistration,
    verifyToken:verifyToken,
    getUser:getUser,
    refreshToken:refreshToken,
    logout:logout,

}